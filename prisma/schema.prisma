// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  number Int?
  numberVerified Boolean @default(false)
  location String
  image String?
  imageVerified Boolean @default(false)
  governmentId String?
  idVerified Boolean @default(false)
  interests String[]
  about  String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
  orders Order[]
  reviews Reviews[]
  feeback Feedback[]
  rating  Ratings[]
  messages Message[]
}

model Admin{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  verified Boolean @default(false)
  verifiedBy String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)

}

model Super{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  emailVerified Boolean @default(false)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  sizel  Int
  sizeb  Int
  location  String
  city  String
  street String
  images  String[]
  createdAt DateTime @default(now())
  category String[]
  roomCount Int
  bathroomCount Int?
  guestCount Int?
  price Int
  priceDay Int?
  dailyBook Boolean @default(false)
  available Boolean @default(true)
  orderItems  OrderItem[]
  approved Boolean @default(false)
  approvedBy String?
  reported Boolean @default(false)
  minHours Int
  open Int
  close Int
  rating  Ratings[]
  services Services[]
  features Features[]
  minibar  Minibar[]
  report Report[]
  
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  orders Order[]
  reviews Reviews[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  duration Int
  day  Boolean @default(false)
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Order {
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime 
  totalPrice  Int
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(uuid())  @map("_id")
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  listingId String  @db.ObjectId// Foreign Key to Product
  listing   Listing @relation(fields: [listingId], references: [id])

}

model Reviews{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId 
  review String
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Ratings{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId 
  rating Int
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Services{
  id        String    @id @default(uuid()) @map("_id")
  listingId  String   @db.ObjectId 
  service    ServiceItem[]

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Features{
  id        String    @id @default(uuid()) @map("_id")
  listingId  String   @db.ObjectId 
  item   FeatureItem[]

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Minibar{
  id        String    @id @default(uuid()) @map("_id")
  listingId  String   @db.ObjectId 
  miniItem  MiniItem[]

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Report{
  id        String    @id @default(uuid()) @map("_id")
  listingId  String   @db.ObjectId 
  userId    String
  report    String

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model MiniItem{
  id        String    @id @default(uuid()) @map("_id")
  barId  String   
  name String
  price Int

  minibar Minibar @relation(fields: [barId], references: [id], onDelete: Cascade)
}

model FeatureItem{
  id        String    @id @default(uuid()) @map("_id")
  featureId  String   
  name String
  price Int

  features Features @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model ServiceItem{
  id        String    @id @default(uuid()) @map("_id")
  serviceId  String   
  name String
  price Int

  features Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Feedback{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  hostId String
  feedback String
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message{
  id        String    @id @default(uuid()) @map("_id")
  userId    String    @db.ObjectId
  toId      String    @db.ObjectId
  messages  Messages[]
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Messages{
  id         String    @id @default(uuid()) @map("_id")
  messageId  String   
  text       String
  read       Boolean  @default(false)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}