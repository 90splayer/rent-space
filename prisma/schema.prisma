// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  number Int?
  numberVerified Boolean @default(false)
  location String
  image String?
  imageVerified Boolean @default(false)
  governmentId String?
  idVerified Boolean @default(false)
  interests String[]
  about  String?
  hashedPassword String?
  sex String?
  badge String?
  city String?
  bank Bank?
  userType  String? @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
  orders Order[]
  reviews Reviews[]
  feeback Feedback[]
  rating  Ratings[]
  messages Message[]
}

model Profile{
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Admin{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  verified Boolean @default(false)
  verifiedBy String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)
  userType String? @default("admin")

}

model Super{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  emailVerified Boolean @default(false)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  sizel  Int
  sizeb  Int
  phone  Int
  location  String
  city  String
  street String
  images  String[]
  createdAt DateTime @default(now())
  category String[]
  roomCount Int
  bathroomCount Int?
  guestCount Int?
  price Int
  priceDay Int?
  dailyBook Boolean @default(false)
  available Boolean @default(true)
  approved Boolean @default(false)
  reviewedBy String?
  status String @default("pending")
  rejectedReason String?
  reported Boolean @default(false)
  minHours Int
  slots Int @default(1)
  open Int
  close Int
  features String[]
  rating  Ratings[]
  report Report[]
  
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  orders Order[]
  reviews Reviews[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  duration Int
  day  Boolean @default(false)
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Order {
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId
  intervals DateTime[] 
  duration    Int
  totalPrice  Int
  phone      Int  
  address    String   
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Reviews{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId 
  review String
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Ratings{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId 
  location Int
  communication Int
  checkin Int
  clean Int
  privacy Int
  host Int
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Report{
  id        String    @id @default(uuid()) @map("_id")
  listingId  String   @db.ObjectId 
  userId    String
  report    String

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Feedback{
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  hostId String
  feedback String
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message{
  id        String    @id @default(uuid()) @map("_id")
  userId    String    @db.ObjectId
  toId      String    @db.ObjectId
  messages  Messages[]
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Messages{
  id         String    @id @default(uuid()) @map("_id")
  messageId  String   
  text       String
  read       Boolean  @default(false)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Bank{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  nairabalance   Int @default(0)
  dollarbalance  Int @default(0)
  userId         String @db.ObjectId  @unique
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transactions[]
}

model Transactions{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  amount         Int
  bankId         String  @db.ObjectId
  bank           Bank @relation(fields: [bankId], references: [id], onDelete: Cascade)
  type           String
  createdAt      DateTime   @default(now())
}