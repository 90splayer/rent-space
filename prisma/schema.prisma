// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  number Int?
  numberVerified Boolean @default(false)
  location String
  image String?
  imageVerified Boolean @default(false)
  governmentId String?
  idVerified Boolean @default(false)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
  orders Order[]
}

model Admin{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fname String
  lname String
  email String @unique
  emailVerified Boolean @default(false)
  verified Boolean @default(false)
  verifiedBy String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deactivate Boolean @default(false)
  deactivatedAt DateTime ?
  blocked Boolean @default(false)

}

model Super{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  emailVerified Boolean @default(false)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  address  String
  images  Image[]
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue Int
  userId String @db.ObjectId
  price Int
  available Boolean @default(true)
  orderItems  OrderItem[]
  approved Boolean @default(false)
  approvedBy String?
  reported Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  orders Order[]
}

model Image {
  id          String   @id @default(uuid()) @map("_id")
  listingId   String   @db.ObjectId
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([listingId])
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Order {
  id        String    @id @default(uuid()) @map("_id")
  userId String @db.ObjectId
  listingId  String   @db.ObjectId
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime 
  totalPrice  Int
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(uuid())  @map("_id")
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  listingId String  @db.ObjectId// Foreign Key to Product
  listing   Listing @relation(fields: [listingId], references: [id])

}